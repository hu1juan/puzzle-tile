{"version":3,"sources":["components/Tile.js","App.js","serviceWorker.js","index.js"],"names":["Tile","props","el","index","ind","size","className","onClick","handleClick","App","useState","setSize","Array","tile","setTile","initArray","arr","i","push","shuffleArray","shuffleArr","sort","Math","random","counter","dummyTile","x","y","e","useEffect","type","min","max","value","onChange","parseInt","target","isNaN","map","element","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.44ffefe5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Tile = (props) => {\r\n  const { el, index, ind, size } = props;\r\n  return (\r\n    <span\r\n      className={el === size * size ? \"rmv\" : \"\"}\r\n      onClick={() => props.handleClick(el, index, ind)}\r\n    >\r\n      {el === size * size ? \"\" : el}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default Tile;\r\n","import React, { useState, useEffect } from \"react\";\nimport Tile from \"./components/Tile\";\nimport \"./App.css\";\n\nfunction App() {\n  const [size, setSize] = useState(3);\n  const [tile, setTile] = useState(new Array(size));\n\n  const initArray = () => {\n    const arr = [];\n    for (let i = 1; i <= size * size; i++) {\n      arr.push(i);\n    }\n    shuffleArray(arr);\n  };\n\n  const shuffleArray = (arr) => {\n    const shuffleArr = arr.sort(() => Math.random() - 0.5);\n    let counter = 0;\n    let dummyTile = new Array(size);\n    for (let x = 0; x < size; x++) {\n      dummyTile[x] = new Array(size);\n      for (let y = 0; y < size; y++) {\n        dummyTile[x][y] = shuffleArr[counter];\n        counter++;\n      }\n    }\n    setTile([...dummyTile]);\n  };\n\n  const handleClick = (e, ind, i) => {\n    if (e === size * size) return;\n    let dummyTile = tile;\n    if (i - 1 !== -1 && dummyTile[ind][i - 1] === size * size) {\n      dummyTile[ind][i] = size * size;\n      dummyTile[ind][i - 1] = e;\n    } else if (i + 1 !== size && dummyTile[ind][i + 1] === size * size) {\n      dummyTile[ind][i] = size * size;\n      dummyTile[ind][i + 1] = e;\n    } else if (ind - 1 !== -1 && dummyTile[ind - 1][i] === size * size) {\n      dummyTile[ind][i] = size * size;\n      dummyTile[ind - 1][i] = e;\n    } else if (ind + 1 !== size && dummyTile[ind + 1][i] === size * size) {\n      dummyTile[ind][i] = size * size;\n      dummyTile[ind + 1][i] = e;\n    } else {\n      return;\n    }\n    setTile([...dummyTile]);\n  };\n\n  useEffect(initArray, [size]);\n\n  return (\n    <div className=\"wrapper\">\n      <div>\n        <label># of tiles per row and column: </label>\n        <input\n          type={\"number\"}\n          min={3}\n          max={9}\n          value={size}\n          onChange={(e) => {\n            const value = parseInt(e.target.value);\n            if (!isNaN(value) && value > 2 && value < 10) {\n              setSize(value);\n            }\n          }}\n        />\n      </div>\n      <button onClick={() => initArray()}>Shuffle</button>\n      <br />\n      <br />\n      {tile.map((element, index) => {\n        return (\n          <div key={index} className=\"row\">\n            {element.map((el, ind) => {\n              return (\n                <Tile\n                  key={ind}\n                  handleClick={handleClick}\n                  index={index}\n                  el={el}\n                  ind={ind}\n                  size={size}\n                />\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}